$ git clone -b <分支名> <仓库地址>
	Git克隆某一个特定的远程分支

$ git commit --amend
	修改最后一次提交：有时候我们提交完了才发现漏掉了几个文件没有加，或者提交信息写错了。想要撤消刚才的提交操作，可以使用 --amend选项重新提交：

$ git pull --rebase origin <分支名>
	拉取

$ git push origin <分支名>
	推送
	--force 加上该参数，会用本地的版本信息强行覆盖远端的版本信息，配合git reset --hard HEAD^ 使用可撤销远端的commit
$ git push origin serverfix:serferfix
	上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支
$ git push origin serverfix:awesomebranch
	把本地分支推送到某个命名不同的远程分支
$ git push [远程名] :[分支名]
	删除远程分支

$ git log  --author=””
	查询某人的提交记录
$ git log <file>
	查询某文件的提交记录
$ git log origin/master --oneline -n 3
	查看远程仓库的日志
	选项 说明 (http://www.open-open.com/lib/view/open1328069733264.html)
	-(n)				仅显示最近的 n 条提交
	--since, --after 	仅显示指定时间之后的提交。
	--until, --before 	仅显示指定时间之前的提交。
	--author 			仅显示指定作者相关的提交。
	--committer 		仅显示指定提交者相关的提交。
	-p 					按补丁格式显示每个更新之间的差异。
	--stat 				显示每次更新的文件修改统计信息。
	--shortstat 		只显示 --stat 中最后的行数修改添加移除统计。
	--name-only 		仅在提交信息后显示已修改的文件清单。
	--name-status 		显示新增、修改、删除的文件清单。
	--abbrev-commit 	仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
	--relative-date 	使用较短的相对时间显示（比如，“2 weeks ago”）。
	--graph 			显示 ASCII 图形表示的分支合并历史。
	--pretty 			使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。

$ git reflog 
	可以查看所有分支的所有操作记录（包括（包括commit和reset的操作），包括已经被删除的commit记录，git log则不能察看已经删除了的commit记录

$ git fetch origin
	刷新远程仓库的信息

$ git add <file>
	将修改添加到暂存区
$ git add .
	将所有修改添加到暂存区

$ git reset HEAD <file>
	取消已经暂存的文件
$ git reset --hard HEAD^
	撤销本地的上一次提交，
	--hard 源码也会回退到某个版本，commit和index 都回回退到某个版本。（注意，这种方式是改变本地代码仓库源码）
	--soft 保留源码，只回退到commit 信息到某个版本，不涉及index的回退，如果还需要提交，直接commit即可
	HRAD^ 表示上一个提交，HEAD^^ 表示上上个提交，也可表示为 HEAD~2，以此类推
	git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。reset 是在正常的commit历史中，删除了指定的commit，这时 HEAD 是向后移动了，而 revert 是在正常的commit历史中再commit一次，只不过是反向提交，他的 HEAD 是一直向前的（参考：http://yijiebuyi.com/blog/8f985d539566d0bf3b804df6be4e0c90.html）

$ git checkout -- <file>
	丢弃未暂存的某个文件的修改
$ git checkout .
	丢弃未暂存的所有文件的修改
$ git checkout <name>
	切换分支
$ git checkout -b <name>
	创建+切换分支
$ git checkout -b [分支名] [远程名]/[分支名]
$ git checkout -b sf origin/serverfix
	现在你的本地分支 sf 会自动向 origin/serverfix 推送和抓取数据了

$ git branch
	查看分支
$ git branch <name>
	创建分支
$ git branch -v
	查看各个分支最后一个提交对象的信息
$ git branch --merged
	查看哪些分支已被并入当前分支
$ git branch --no-merged
	查看还未合并进来的分支
$ git branch -d <name>
	删除本地分支
$ git branch -D <name>
	强制删除本地分支
$ git branch --set-upstream-to=origin/[远程分支名]  [本地分支名]
	设置本地分支与远程分支的映射关系

$ git merge <name>
	合并某分支到当前分支

$ git diff
	查看未暂存的更新
$ git diff --cached
	查看已暂存的更新
$ git diff HEAD -- <name>
	查看工作区和版本库里面最新版本的区别

$ git config --list
	查看配置信息




/****** 关于删除分支及分支同步 ******/
	作者：YINdevelop
	链接：https://www.jianshu.com/p/811b07b129e8

1、本地删除了分支，远程也想删除。
	相关命令：
		1.删除远程分支: git push origin -d 分支名
		2.删除本地分支: git branch -d 分支名
	具体情况：
		a.假如我在本地想要删除某个分支，我也想把远程仓库的这个分支也要删掉怎么办？
			1.使用git branch -d 分支名来删除本地分支。
			2.使用git push origin -d 分支名直接来删除远程分支。在次使用git branch -a,发现分支已经不存在了。
			或者
			1.使用git branch -d 分支名来删除本地分支。
			2.最简单的解决办法就是直接到gitlab/github进行删除。
		b.假如我只想把远程的删除掉怎么办？
			1.使用git push origin -d 分支名直接来删除远程分支。此时删除的只是远程的分支，本地仍然存在
			或者
			1.直接到gitlab/github进行删除

2、远程删除了分支，本地也想删除
	相关命令：
		1.查看远程分支和本地分支的对应关系: git remote show origin  
		2.删除远程已经删除过的分支: git remote prune origin
	具体情况：
		假如我直接到 gitlab/github 删除了某个分支，我在本地使用 git branch -a 查看远程分支，依然存在并且可以切换使用。我本地也想把远程分支记录删除怎么办？
			1.git branch -a查看远程分支，红色的是本地远程远程分支记录。
			2.执行下面命令查看远程仓库分支和本地仓库的远程分支记录的对应关系：
				git remote show origin  
			3.会看到：
 				refs/remotes/origin/远程仓库已经删除的分支名              stale (use 'git remote prune' to remove)
 				其中：
				Local refs configured for 'git push':  命令下面的分支是本地仓库的远程分支记录中仍存在的分支，但远程仓库已经不存在。
			4.输入git remote prune origin来删除远程仓库已经删除过的分支
			5.验证 git branch -a
				此时可以看到本地远程分支记录已经和远程仓库保持一致了。








